Configuration as Data - Environment Variables, Secrets, and ConfigMaps
================================================================================

Why do we need Configuration as Data
-----------------------------------------

1) Abstraction -
2) Container Images are immutable
3) Service Discovery
4) Sensitive information


Configuring Applications in Pods
--------------------------------------
we can configure our pods in any of the below three ways

1) command Line Arguments 
2) Environment Variables - At runtime program running inside a container can read environment variable and can chnage how it behaves based on the values 
                           set in those environment variable
3) ConfigMaps - For Complex scenarios we use kubernetes API onject( ConfigMaps) to inject more complex configuration either in environment variable or the 
                configuration files exposed into the file systems of our containers inside of Pods.


Environment Variables Inisde Pods 
----------------------------------------

1) There are two types of environment variables inside kubernetes
	a) User Defined - 1) These are defined in pod spec for each container 
	                  2) We can defined them inside container image also but we won't do that ( Not a best Practise and it impacts container portability) 
                      3) we can define environment variable in pod spec in name/value pair or we have ability to read environment variable (valueFrom) from a location
                         or a kubernetes resources.
     
	b) System defined - 1) When a Pod starts up we gonna get environment variable for names of all services available in the cluster. (helpful in service discovery)

2) Environment Variables are defined at container startup
3) And they can't be updated once the Pod is created 

Example - how to define environment variable
------------------------------------

spec:
  containers:
  - image: nginx:1.20.2
    name: nginx
    env:
      - name: DATABASE-SERVERNAME
	    value: "sql.example.local"
	  - name: BACKEND-SERVERNAME
	    value: "be.example.local"
	

DEMO - Passing Configurations into Container using Environment Variables
-----------------------------------------------------------------------------

# Creating two deploymnets, one for database system and other for our application
# I'm puting a little wait in there so the Pods are created one after the other 

** kubectl apply -f deploymnet.alpha.yaml
** sleep 5
** kubectl apply -f deploymnet.beta.yaml

# let's look at the service 

** kubectl get service 

# Now let's get the name of one of our pods 

** PODNAME=$(kubectl get pods | grep hello-world-alpha | awk '{ print$1 }' | head -n 1
** echo $PODNAME

# Inside the Pod, lets read the container's environment variables
# Notice the alpha information is there but not the beta information, Sicne beta wasn't defined when the Pod started.

** kubectl exec -it $PODNAME --/bin/bash
** printenv| sort
** exit 

# if you delete the pod and it gets recreated, you will get the variables for the aplha and beta service information.

** kubectl delete pod $PODNAME

# Get the new pod name and check the environment variables .. the variables defined at Pod/Container startup

** PODNAME=$(kubectl get pods | grep hello-world-alpha | awk '{ print$1 }' | head -n 1
** kubectl exec -it $PODNAME --/bin/bash -c "printenv| sort"

# if we delete our deployment and service

** kubectl delete deployment deployment_beta
** kubectl delete service service_beta


# the environment variables stick around .. to get a new set, the pod needs to be recreated ( however beta service is delete but the environment 
#  varibales are independent of actula run time of service)

** kubectl exec -it $PODNAME --/bin/bash -c "printenv| sort"

**********************************************************************************************************************************************************************

Secrets
==============

1) It stores sensitive information as Object in pur cluster 
2) It stores the information for later retrieval
3) Examples are - Passwords, API tokens, keys and certficates 
4) This is safer and more flexible configurations in terms of pod specs and Images 
 
Properties of Secrets
-----------------------

1) They are base64 encoded (not encrypted)
2) But Encryption can be configured in the cluster 
3) If you are using base64 encoding then that information is stored in etcd packup and transportation of this information needs to be secured
4) Secrets are Namespaced and can only be referenced by Pods in the same Namespace 
5) Unavailable Secrets will prevent a pod from starting up
6) There are 3 types of secrets in Kubernetes 
   a) Genreic 
   b) DOCKER registry
   c) TLS

** kubectl create secret generic app1 --from-literal=USERNAME=app1login --from-literal=PASSWORD='SOMETHING@app1login'

We can expose these sensitive information as environment variables or files.

Properties of Secrets
-----------------------

We can expose these sensitive information in 2 ways:

1) Environment Variables
2) Volumes or Files

Note - The difference b/w environment variable and Volumes/Files are that latter can be updated( the pod need not to be terminated and restarted 
back to take effect the updated secrets kubelets will update the files inside a running pod)

2) Secrets feauture (kubernetes 1.19) - They can be marked as immutable (it means once created they can't be chnaged, so pods and secret 
                                        both need to be deleted after use)
3) Secret must be accessible to the pod at the startup other will Pod won't be created and the stae will be pending until it can access secret.


Usin secrets in Environment Variables
-----------------------------------------
(Lengthy way)

spec:
	containers:
	- nsme: hello-world-alpha
    ...
    env:
      - name: app1username
	    valueFrom:
			secreteKeyref:
				name: app1
				key: USERNAME
	  - name: app1password
		valueFrom:
			secreteKeyref:
				name: app1
				key: PASSWORD
	    

(Short way)

spec:
	containers:
	- nsme: hello-world-alpha
    ...
    envfrom:
	- secreteKeyref:
				name: app1


Using secrets as Files
--------------------------

spec:
	volumes:
	- name: appconfig
	  secret:
		secretName: app1
	containers:
	 ...
	 volumeNounts:
		- name: appconfig
		  mountPath: "/etc/appconfig"


DEMO: Creating and Access Scerets
--------------------------------------

#generic - Create a sceret from a local file, directory or literal value.
# The keys and values are case sensitive 

** kubectl create secret generic app1 --from-literal=USERNAME=app1login --from-literal=PASSWORD='SOMETHING@app1login'

# Opaque means it's an arbitrary user defined ey/value pair. Data means two key/value pairs in the secrets 
# Other types inclusde service accounts and container registry authentication information

** kubectl get secrets 

# App1 said i had 2 data elements, lets look

** kubectl describe secret app1

# If we need to access those at command line ...
# These are wrapped in bash expansion to add a newline to output for readability

** echo $(kubectl get secret app1 --template={{.data.USERNAME}})
** echo $(kubectl get secret app1 --template={{.data.USERNAME}} | base64 --decode)
** echo $(kubectl get secret app1 --template={{.data.PASSWORD}})
** echo $(kubectl get secret app1 --template={{.data.PASSWORD}} | base64 --decode)


DEMO: Accessing Scerets inside a Pod as environment variables
-----------------------------------------------------------------------

** kubectl apply -f deployment-secrets-env.yaml
** PODNAME=$(kubectl get pods | grep hello-world-secrets-env | awk '{ print$1 }' | head -n 1
** echo $PODNAME

# Now let's get the environment variable from our container
# Our Environment variable from Pod sepc are defined
# Notice that alpha information is there but not beta information. Since beta wasn't defined when the POd started 

** kubectl exec -it $PODNAME -- /bin/bash 
** printenv| sort
** exit


DEMO Accessing secrets as file
---------------------------------

** kubectl apply -f deployment-secrets-files.yaml
** PODNAME=$(kubectl get pods | grep hello-world-secrets-env | awk '{ print$1 }' | head -n 1
** echo $PODNAME

# Looking more closely at the POD we see volumes, app config and in Mounts ..

** kubectl describe pod $PODNAME

# let's access a shell on the pod

** kubectl exec -it $PODNAME -- /bin/bash 

# Now we see the path we defined in the volumes part of the pod spec
# A directory for each KEY and it's contents are the value 

** ls /etc/appconfig
** cat /etc/appconfig/USERNAME
** cat /etc/appconfig/Passwords
** exit 

************************************************************************************************************************************************************************

Accessing a Private Container Registry 
-----------------------------------------------

1) Secrets for application configuration 
2) use Secrets to access a private container registry
3) Want to access ergistries over the internet 
4) Examples are - Docker hub, Cloud based container registries 
5) we can create a sectre type docker-registry whihc will hold the credentials to login to docker hub.
6) Enabling kubernetes (kubelet) to pull the images from the private registry 


DEMO: Pulling a container from a private Container Registry
---------------------------------------------------------------

1) we should have a private registry either on cloud or docker hub etc.

# let's pull down a hello world image from docker 

** docker pull hello-world-alpha

# let's get a listing of images to confirm the image has been downloaded 

** docker images ls 

# tagging the image in format of your registry, image and tagging
# you will be using your own repository, so update that information here.
# source_ref: this is the image pulled form 
# target_ref: this the image you want to push into your private repository

** docker images tag <current_image> <new_image>

# Now push the locally tagged image to the private registry at docker hub

** docker push <new_image> --user $USERNAME

# create our secret that we'll use for our image
# Update the parameters to match the information for your repository including the servername, username and password 

** kubectl create secret docker-registry <registry_name> \
	--docker-server=https://index.docker.io/v2/ \
	--docker-username=$USERNAME \
	--docker-password=$PASSWORD \
	--docker-email=$EMAIL 

# ensure image doesn't exist on any of our nodes.. else we can get false positive
#caution. this will delete any image that begins with hello-app (run the below command on all three nodes)

** docker --namespace k8s.io image ls "name~=hello-ap" -q | xargs docker --names

# Create a deployment using imagePullSecret in Pod Spec

** kubectl apply -f deployment-private-registry.yaml
** kubectl describe pods hello-world

**********************************************************************************************************************************************************************

ConfigMaps
============

1) They are key value pairs exposed into a pod used application configuration settings 
2) defining application or environment specific settings 
3) Decoupling applictaion and Pod configurations 
4) maximizing our container images's portability
5) Environment variable or files 


Using ConfigMaps in Pods
-----------------------------

2 ways 

1) Environment Variables - we have valueFrom and envFrom 

2) Volumes and Files - a) Volume mounted inside a container 
                       b) Single file or directory 
					   c) many files or directories 
					   d) Volume of ConfigMaps can be updated without deleting and restarting pods 
					   e) we can mark ConfigMaps immutable

Impretively defining configMpas
---------------------------------------

kubectl create configmap appconfigprod \
	--from-literal=DATABSE_SERVERNAME=sql.example.local \
	--from-literal=BACKEND_SERVERNAME=be.example.local

kubectl create configmap appconfigqa \
	--from-file= appconfigqa


Declaratively defining configMpas (using Environment Variales using env)
-----------------------------------------------------------------

apiVersion: apps/v1
kind: ConfigMap
metadata:
	name: appconfigprod
data:
  BACKEND_SERVERNAME: be.example.local
  DATABSE_SERVERNAME: sql.example.local
spec:
	containers:
	- name: hello-world
    ...
    env:
      - name: BACKEND_SERVERNAME
	    valueFrom:
			ConfigMapKeyref:
				name: appconfigprod
				key: DATABSE_SERVERNAME
	  - name: DATABSE_SERVERNAME
	    valueFrom:
			ConfigMapKeyref:
				name: appconfigprod
				key: DATABSE_SERVERNAME


using envFrom
---------------

containers:
 - name: hello-world
  ...
  envFrom:
	- configMapRef:
	     name: appconfigprod
 

Using ConfigMaps as Files
-----------------------------

spec:
  volumes:
	- name: appconfig
	  configMap:
		name: appconfigqa
  containers:
  - name: hello-world
    ...
	volumeMounts:
	 - name: appconfig
	   mountPath: "/etc/appconfig"

DEMO: Creating ConfigMaps 
-------------------------------

# Creating ConfigMaps from literal 

** 	kubectl create configmap appconfigprod \
      --from-literal=DATABSE_SERVERNAME=sql.example.local \
	  --from-literal=BACKEND_SERVERNAME=be.example.local

# Creating ConfigMaps from files or from directories
# if no key, then base name of file.
# Otherwise we can specify a key name to allow fpor more complex app configs and access to specific configuration elements.

** more appconfigqa
** kubectl create configmap appconfigqa \
	--from-file= appconfigqa

# Each Creation method yeilded a different structure in the configMap

** kubectl get configmap appconfigprod -o yaml
** kubectl get configmap appconfigqa -o yaml

DEMO: Using ConfigMaps in Pod Configurations
-------------------------------------------------
1) As environment variable

** kubectl apply -f deployment-configmaps-env-prod.yaml

# let's see some configured environment variables

** PODNAME=$(kubectl get pods | grep hello-world-secrets-env | awk '{ print$1 }' | head -n 1)
** echo $PODMAN
** kubectl exec -it $PODNAME --/bin/bash
** printenv | sort
** exit 

2) As Files

** kubectl apply -f deployment-configmaps-env-qa.yaml

# let's see our configmap exposed as file using the key as the file name

** PODNAME=$(kubectl get pods | grep hello-world-secrets-env | awk '{ print$1 }' | head -n 1)
** echo $PODMAN
** kubectl exec -it $PODNAME --/bin/bash
** ls /etc/appconfig
** cat /etc/appconfig/appconfigqa
** exit 

# Our configMap key, was the filename we read in, and the values are inside the file.
# this is how we can readwhole files at a time and present them to the file system with the same name in one ConfigMap
# So think about using this for daemon configs like nginx, redis ..etc 

** kubectl get configmap appco -o yaml

# Updating a configMap

** kubectl edit configmap appconfigqa
** kubectl exec -it $PODNAME --/bin/bash
** watch cat /etc/appconfig/appconfigqa 
** exit










































































































































































































































































































































































































































































































































































































































